
plugins {
    id 'java'
    id 'application'
    id 'org.springframework.boot' version '3.1.2'
    id 'io.spring.dependency-management' version '1.1.0'
    id "com.github.node-gradle.node" version "5.0.0"
    id "com.netflix.dgs.codegen" version "5.12.4"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
java.sourceCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

node {
    version = '16.15.1'

//    workDir = file("${project.projectDir}/src/main/frontend/nodejs")
//    npmWorkDir = file("${project.projectDir}/src/main/frontend/npm")

//    // Set the work directory where node_modules should be located
//    nodeModulesDir = file("${project.projectDir}/src/main/frontend")
}

tasks.register('npmInstallDependencies', NpmTask) {
    dependsOn('npmSetup')
    execOverrides {
        it.ignoreExitValue = true
        it.workingDir = 'src/main/frontend'
    }
    args = ['install']
}

tasks.register('npmBuild', NpmTask) {
    dependsOn('npmInstallDependencies')
    execOverrides {
        it.workingDir = 'src/main/frontend'
    }
    args = ['run', 'build']
}

tasks.register('copyFrontendToBuild', Copy) {
    dependsOn('npmBuild')
    from "$projectDir/src/main/frontend/build/"
//    include "*"
    into "$buildDir/resources/main/static"
}

processResources{
    dependsOn 'copyFrontendToBuild'
}

generateJava{
    packageName = "ca.myapp.dgs" // The package name to use to generate sources
    generateClientv2 = false // Enable generating the type safe query API
    subPackageNameTypes = "graph.schema"
//    schemaPaths = ["${projectDir}/src/main/resources/schema"]
    generatedSourcesDir = "${projectDir}/src/main"
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation files('python')
    implementation 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.postgresql:postgresql:42.5.4'
    implementation 'javax.persistence:javax.persistence-api:2.2'
    implementation 'org.springframework.boot:spring-boot-starter-webflux:3.1.2'
    implementation 'com.h2database:h2'

    //CLOUD GCP FOR POSTGRESQL
    implementation platform('com.google.cloud:spring-cloud-gcp-dependencies:4.5.1')
    implementation 'com.google.cloud:spring-cloud-gcp-starter-sql-postgresql'


    //NETFLIX DGS
    implementation(platform("com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:7.3.4"))
    implementation 'com.netflix.graphql.dgs:graphql-dgs-spring-boot-starter:7.3.4'

    //LOMBOK
    compileOnly 'org.projectlombok:lombok:1.18.28'
    annotationProcessor 'org.projectlombok:lombok:1.18.28'

    //TEST
    testCompileOnly 'org.projectlombok:lombok:1.18.28'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.28'

    testImplementation 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testImplementation 'org.springframework.graphql:spring-graphql-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

//mainClassName='ca.myapp.Application'