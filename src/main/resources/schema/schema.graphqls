type Query {
    getAllJobs(inputFilter: JobFilter): [Job]

    allByTitle(inputFilter: TitleFilter): [Title]

    getAllSkills(orderBy: SkillOrderByPercent): [Skill]

    getInsertionDataStat: [InsertionDataStat]
}

type Job {
    jobId: String!
    title: String!
    companyName: String
    location: String
    via: String
    description: String
    extensions: String
    remoteOption: Boolean
    salary: [Float]
    eduDegree: [String]
    skills: [String]
    postedAt: String
    scheduleType: String
}

type Title {
    title: String!
    minSalary: Float
    maxSalary: Float
    avgSalary: Float
    count: Float
    topSkills: [Skill]
    eduDegree: [Degree]
}

type Skill {
    skill: String
    count: Int
    percent: Float
}

type Degree {
    degree: String
    count: Int
    percent: Float
}

input JobFilter {
    title: String
    remoteOption: Boolean
    scheduleType: String
}

input TitleFilter {
    title: String
}

input SkillOrderByPercent {
    percent: Sort
}
enum Sort {
    asc
    desc
}

### Insertion Data Stat ###
type InsertionDataStat {
    insertionId: Int!
    updatedAt: String
    jobsAdded: Int
    totalJobs: Int
}

schema {
    query: Query
}
