type Query {
    getAllJobs(inputFilter: JobFilter): [Job]

    getAllTitles(inputFilter: TitleFilter): [Title]

    getInsertionDataStat: [InsertionDataStat]

    getOverallSkillsStat(order: OrderDirection): [Skill]

    getSkillsByTitle(inputFilter: TitleFilter, order: OrderDirection): [Skill]

    getDegrees(inputFilter: TitleFilter, order: OrderDirection): [Degree]

    getDistinctTitles: [String]
}

type Job {
    jobId: Int!
    apiJobId: String!
    title: String!
    companyName: String
    location: String
    via: String
    description: String
    extensions: String
    remoteOption: Boolean
    postedAt: String
    scheduleType: String
}

type Title {
    title: String!
    minSalary: Float
    maxSalary: Float
    avgSalary: Float
    count: Int
    top10Skills: [Skill]
    eduDegree: [Degree]
}

type Skill {
    skillId: Int!
    title: String!
    skill: String!
    countByTitle: Int!
    percByTitle: Float!
    overallPerc: Float!
}

type Degree {
    degreeId: Int!
    title: String!
    degree: String!
    countByTitle: Int!
    percByTitle: Float!
    overallPerc: Float!
}

input JobFilter {
    title: String
    remoteOption: Boolean
    scheduleType: String
}

input TitleFilter {
    title: String
}

input OrderDirection {
    direction: Sort
}
enum Sort {
    asc
    desc
}

### Insertion Data Stat ###
type InsertionDataStat {
    insertionId: Int!
    updatedAt: String
    jobsAdded: Int
    totalJobs: Int
}

schema {
    query: Query
}
